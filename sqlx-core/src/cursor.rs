use std::future::Future;

use futures_core::future::BoxFuture;
use futures_core::stream::BoxStream;

use crate::connection::MaybeOwnedConnection;
use crate::database::{Database, HasRow};
use crate::executor::Execute;
use crate::{Connect, Pool};

/// Represents a result set, which is generated by executing a query against the database.
///
/// A `Cursor` can be created by either [`Executor::execute`](trait.Execute.html) or
/// [`Query::fetch`](struct.Query.html).
///
/// Initially the `Cursor` is positioned before the first row. The `next` method moves the cursor
/// to the next row, and because it returns `None` when there are no more rows, it can be used
/// in a `while` loop to iterate through all returned rows.
pub trait Cursor<'c, 'q>
where
    Self: Send,
    // `.await`-ing a cursor will return the affected rows from the query
    Self: Future<Output = crate::Result<u64>>,
{
    type Database: Database;

    // Construct the [Cursor] from a [Pool]
    // Meant for internal use only
    // TODO: Anyone have any better ideas on how to instantiate cursors generically from a pool?
    #[doc(hidden)]
    fn from_pool<E>(pool: &Pool<<Self::Database as Database>::Connection>, query: E) -> Self
    where
        Self: Sized,
        E: Execute<'q, Self::Database>;

    #[doc(hidden)]
    fn from_connection<E, C>(conn: C, query: E) -> Self
    where
        Self: Sized,
        <Self::Database as Database>::Connection: Connect,
        // MaybeOwnedConnection<'c, <Self::Database as Database>::Connection>:
        //     Connect<Database = Self::Database>,
        C: Into<MaybeOwnedConnection<'c, <Self::Database as Database>::Connection>>,
        E: Execute<'q, Self::Database>;

    #[doc(hidden)]
    fn first(self) -> BoxFuture<'c, crate::Result<Option<<Self::Database as HasRow<'c>>::Row>>>
    where
        'q: 'c;

    /// Fetch the next row in the result. Returns `None` if there are no more rows.
    fn next(&mut self) -> BoxFuture<crate::Result<Option<<Self::Database as HasRow>::Row>>>;

    /// Map the `Row`s in this result to a different type, returning a [`Stream`] of the results.
    fn map<T, F>(self, f: F) -> BoxStream<'c, crate::Result<T>>
    where
        F: MapRowFn<Self::Database, T>,
        T: 'c + Send + Unpin,
        'q: 'c;
}

pub trait MapRowFn<DB, T>
where
    Self: Send + Sync + 'static,
    DB: Database,
    DB: for<'c> HasRow<'c>,
{
    fn call(&self, row: <DB as HasRow>::Row) -> T;
}

impl<DB, T, F> MapRowFn<DB, T> for F
where
    DB: Database,
    DB: for<'c> HasRow<'c>,
    F: Send + Sync + 'static,
    F: Fn(<DB as HasRow>::Row) -> T,
{
    #[inline(always)]
    fn call(&self, row: <DB as HasRow>::Row) -> T {
        self(row)
    }
}
